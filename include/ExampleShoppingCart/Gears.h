#ifndef GEARS_H
#define GEARS_H

//****************
//Overall Summary
//****************

//The purpose of this file is to make requesting APIs from Gears as simple and automated as possible.

//****************
//Auto-generation
//****************

//This file is auto-generated by Gears Studio and is based on the Implemented APIs and Dependencies listed in the
//References tab. Every time you add a new dependency in Gears Studio and generate, a new "register" entry will
//automatically appear in the Gears class seen below.

//*********
//Sections
//*********

//The Gears class defines two sections that determine which APIs are automatically requested and
//stored in this helper class when the component is loaded. The two sections are:
//
//START_APIS to END_APIS:
//  This is where APIs that your component depends on are listed.
//
//START_MY_APIS to END_MY_APIS:
//  This is where APIs implemented by your component are listed.
//  These are typically only useful when registering Listener APIs with other components.

//*********************
//Using requested APIs
//*********************

//The APIs listed in the two sections are requested when Gears::InitializeAPIs is called. The resulting API
//pointers are stored in the Gears class. The exact use of the APIs depends on the section and the
//allocation type.
//
//1) APIs registered in the START_APIS section (from external components)
//   Accessed by calling Gears::API::<APIName>v<Version>()
//
//2) APIs registered in the START_APIS section where the allocation type has been changed to All
//   Accessed by calling Gears::API::<APIName>v<Version>_List()
//   For more information about the allocation type, refer to the section "Things That Can Be Useful to Change".
//
//3) APIs registered in the START_MY_APIS section (from the local component)
//   Accessed by calling Gears::MyAPI::<APIName>v<Version>()

//***************
//Customizations
//***************

//Making changes to the Gears class in order to fit your custom use case is possible. However, there are some parts
//of the file that are off-limits. Review the following topics to see what can and can't be changed in this file.

//*********************
//Things NOT to Change
//*********************

//Because this file is auto-generated, some things should not be edited to avoid breaking the code parser
//when generating the component. Avoid doing the following:
//
//1) Deleting or commenting out the start or end sections - START_APIS, END_APIS, START_MY_APIS, and END_MY_APIS
//
//2) Removing new lines in the register sections (ex. having multiple REGISTER_API calls on the same line) -
//   this will confuse the parser.
//
//3) Altering the key elements of the class (ex. friend class APIHelper line, changing the base class, making
//   a new instance of this class) - all of these are key elements to make the registration and usage simple
//   and automated

//************************************
//Things That Can Be Useful to Change
//************************************

//To fit your custom use case, the following modification can be made to the Gears class:
//
//1) Allocation Type
//   The third parameter of REGISTER_API is the allocation type. This parameter controls how the API is requested.
//
//          REGISTER_API(<APIName>, <Version>, <AllocationType>)
//
//   The following Allocation Type values are supported:
//
//          Single
//          Instance
//          All
//
//   The default allocation type whenever a new API is referenced is always Single or Instance depending on the
//   settings of the particular API. However, sometimes you want more than a single copy of an API (ex. you want to
//   talk to all the components that implement your API). In this case you can manually change the allocation type
//   to All. This will request all copies of an API that are registered with Gears and instead of storing
//   a single pointer, the APIs will be stored in a vector.
//
//2) Requesting multiple versions
//   If you add a reference to ExampleAPI version 2 in Gears Studio, then a single REGISTER_API call is
//   added to this file. However you may be interested in also requesting version 1 in this example.
//   It is already included as part of the version 2 dependency and can be requested by simply duplicating
//   the REGISTER_API line and changing the version from 2 to 1.
//
//3) Removing API registration
//   APIs are automatically added to the two sections based on the References tab in Gears Studio. But what if
//   you requested an API dependency but don't actually want to request it (ex. only referenced to use an enum it
//   defined or simply don't need access to your own implemented API). Feel free to delete or comment out the
//   registration calls, REGISTER_API and/or REGISTER_MY_API. However if you don't need the dependency at all
//   anymore, we suggest removing the dependency in Gears Studio which will automatically remove the registration
//   calls.
//
//4) Adding helper functions
//   Except for the specific items called out in the section "Things NOT to Change" the Gears class can be
//   customized as desired. For example, a simple and helpful addition would be adding a function for
//   logging debug messages. Feel free to customize the class as you see fit.
//

#include <APIHelper.h>
#include <cassert>
#include <string>

#include <ComponentAPI.h>
#include <ExampleShoppingCartAPI.h>

class Gears : public APIHelper<Gears, APIManager_v5>
{
  friend class APIHelper<Gears, APIManager_v5>;

public:
  START_APIS(Gears)
  END_APIS()

  START_MY_APIS(Gears)
  REGISTER_MY_API(ComponentAPI, 5)
  REGISTER_MY_API(ExampleShoppingCartAPI, 1)
  REGISTER_MY_API(ExampleShoppingCartAPI, 2)
  END_MY_APIS()

private:
  static void OnInitializeAPIs()
  {
    //Any additional API processing needed after APIs have loaded can happen here.
    //Example: You requested All of an API, but only want at most X of them. Use this function to remove the unwanted ones from the vector.
  }

  static void OnReleaseAPIs()
  {
    //This is the last chance to access the APIs.
    //Instanced APIs are Free'd and all APIs are set to nullptr after this function is called.
  }

  static void OnRequestError(const std::string& api_name, int32_t version, APIAllocation allocation, const std::string& message)
  {
    //One of the APIs requested wasn't found. Some common reasons include:
    //  1) No components in the Application Directory implement the requested API.
    //  2) A component that implements the requested API is present but is not successfully loading. Check ComponentLoadStatus.log for more details.
    //  3) A component that implements the requested API is present but it implements a different version of the API.

    assert(false);
  }

  //Disabled to prevent creation and copying of this object
  Gears() { }
  Gears(const Gears&) { }
  Gears& operator=(const Gears&) { return *this; }
};

#endif
